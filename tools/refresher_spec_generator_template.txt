describe ManageIQ::Providers::Redhat::InfraManager::Refresh::Refresher do
  before(:each) do
    guid, server, zone = EvmSpecHelper.create_guid_miq_server_zone
    @ems = FactoryGirl.create(:ems_redhat, :zone => zone, :hostname => "localhost", :ipaddress => "localhost",
                              :port => 8443)
    @ems.update_authentication(:default => {:userid => "admin@internal", :password => "123456"})
    @ems.default_endpoint.verify_ssl = OpenSSL::SSL::VERIFY_NONE
    allow(@ems).to(receive(:supported_api_versions).and_return([3, 4]))
    stub_settings_merge(:ems => { :ems_redhat => { :use_ovirt_engine_sdk => true } })
     stub_const("OvirtSDK4::Connection", ManageIQ::Providers::Redhat::InfraManager::ApiIntegration::OvirtSDKConnectionVCR)
    # allow(OvirtSDK4).to receive(:Connection).and_return(ManageIQ::Providers::Redhat::InfraManager::ApiIntegration::OvirtSDKConnectionVCR)
  end

  require 'yaml'
  def load_response_mock_for(filename)
    prefix = described_class.name.underscore
    YAML.load_file(File.join('spec', 'models', prefix, 'response_yamls', filename + '.yml'))
  end

  before(:each) do
    @inventory_wrapper_class = ManageIQ::Providers::Redhat::InfraManager::Inventory::Strategies::V4

    allow_any_instance_of(@inventory_wrapper_class).to(receive(:api).and_return("4.2.0_master."))
    allow_any_instance_of(@inventory_wrapper_class).to(receive(:service)
      .and_return(OpenStruct.new(:version_string => '4.2.0_master.')))
  end

  it "will perform a full refresh on v4.1" do
    VCR.use_cassette("#{described_class.name.underscore}_generated1", :allow_unused_http_interactions => true, :allow_playback_repeats => true, :record => :new_episodes) do
      EmsRefresh.refresh(@ems)
    end
    @ems.reload

    assert_table_counts(3)
    assert_ems
    assert_specific_cluster
    assert_specific_storage
    assert_specific_host
    assert_specific_vm_powered_on
    assert_specific_vm_powered_off
    assert_specific_template
    assert_relationship_tree
  end

  def assert_table_counts(lan_number)
    expect(ExtManagementSystem.count).to eq(>>>ExtManagementSystem.count<<<)
    expect(EmsFolder.count).to eq(>>>EmsFolder.count<<<)
    expect(EmsCluster.count).to eq(>>>EmsCluster.count<<<)
    expect(Host.count).to eq(>>>Host.count<<<)
    expect(ResourcePool.count).to eq(>>>ResourcePool.count<<<)
    expect(VmOrTemplate.count).to eq(>>>VmOrTemplate.count<<<)
    expect(Vm.count).to eq(>>>Vm.count<<<)
    expect(MiqTemplate.count).to eq(>>>MiqTemplate.count<<<)
    expect(Storage.count).to eq(>>>Storage.count<<<)

    expect(CustomAttribute.count).to eq(>>>CustomAttribute.count<<<) # TODO: 3.0 spec has values for this
    expect(CustomizationSpec.count).to eq(>>>CustomizationSpec.count<<<)
    expect(Disk.count).to eq(>>>Disk.count<<<)
    expect(GuestDevice.count).to eq(>>>GuestDevice.count<<<)
    expect(Hardware.count).to eq(>>>Hardware.count<<<)
    # the old code expects 3 and new 2
    expect(Lan.count).to eq(>>>Lan.count<<<)
    expect(MiqScsiLun.count).to eq(>>>MiqScsiLun.count<<<)
    expect(MiqScsiTarget.count).to eq(>>>MiqScsiTarget.count<<<)
    expect(Network.count).to eq(>>>Network.count<<<)
    expect(OperatingSystem.count).to eq(>>>OperatingSystem.count<<<)
    expect(Snapshot.count).to eq(>>>Snapshot.count<<<)
    # the old code expects 3 and new 2
    expect(Switch.count).to eq(>>>Switch.count<<<)
    expect(SystemService.count).to eq(>>>SystemService.count<<<)

    expect(Relationship.count).to eq(>>>Relationship.count<<<)
    expect(MiqQueue.count).to eq(>>>MiqQueue.count<<<)
  end

  def assert_ems
    expect(@ems).to have_attributes(
      :api_version => "4.2.0_master.",
      :uid_ems     => nil
    )

    expect(@ems.ems_folders.size).to eq(>>>@ems.ems_folders.size<<<)
    expect(@ems.ems_clusters.size).to eq(>>>@ems.ems_clusters.size<<<)
    expect(@ems.resource_pools.size).to eq(>>>@ems.resource_pools.size<<<)
    expect(@ems.storages.size).to eq(>>>@ems.storages.size<<<)
    expect(@ems.hosts.size).to eq(>>>@ems.hosts.size<<<)
    expect(@ems.vms_and_templates.size).to eq(>>>@ems.vms_and_templates.size<<<)
    expect(@ems.vms.size).to eq(>>>@ems.vms.size<<<)
    expect(@ems.miq_templates.size).to eq(>>>@ems.miq_templates.size<<<)

    expect(@ems.customization_specs.size).to eq(>>>@ems.customization_specs.size<<<)
  end

  def assert_specific_cluster
  >>>!~!@cluster_1 = @ems.clusters.first<<<
    @cluster = EmsCluster.find_by(:name => '>>>@cluster_1.name<<<')
    expect(@cluster).to have_attributes(
      :ems_ref                 => ">>>@cluster_1.ems_ref<<<",
      :ems_ref_obj             => ">>>@cluster_1.ems_ref_obj<<<",
      :uid_ems                 => ">>>@cluster_1.uid_ems<<<",
      :name                    => ">>>@cluster_1.name<<<",
      :ha_enabled              => ">>>@cluster_1.ha_enabled<<<", # TODO: Should be true
      :ha_admit_control        => ">>>@cluster_1.ha_admit_control<<<",
      :ha_max_failures         => ">>>@cluster_1.ha_max_failures<<<",
      :drs_enabled             => ">>>@cluster_1.drs_enabled<<<", # TODO: Should be true
      :drs_automation_level    => ">>>@cluster_1.drs_automation_level<<<",
      :drs_migration_threshold => ">>>@cluster_1.drs_migration_threshold<<<"
    )

    expect(@cluster.all_resource_pools_with_default.size).to eq(>>>@cluster_1.all_resource_pools_with_default.size<<<)
    @default_rp = @cluster.default_resource_pool
    >>>!~!@default_rp_1 = @cluster_1.default_resource_pool<<<
    expect(@default_rp).to have_attributes(
      :ems_ref               => ">>>@default_rp_1.ems_ref<<<",
      :ems_ref_obj           => ">>>@default_rp_1.ems_ref_obj<<<",
      :uid_ems               => ">>>@default_rp_1.uid_ems<<<",
      :name                  => ">>>@default_rp_1.name<<<",
      :memory_reserve        => >>>@default_rp_1.memory_reserve<<<,
      :memory_reserve_expand => ">>>@default_rp_1.memory_reserve_expand<<<",
      :memory_limit          => ">>>@default_rp_1.memory_limit<<<",
      :memory_shares         => ">>>@default_rp_1.memory_shares<<<",
      :memory_shares_level   => ">>>@default_rp_1.memory_shares_level<<<",
      :cpu_reserve           => ">>>@default_rp_1.cpu_reserve<<<",
      :cpu_reserve_expand    => ">>>@default_rp_1.cpu_reserve_expand<<<",
      :cpu_limit             => ">>>@default_rp_1.cpu_limit<<<",
      :cpu_shares            => ">>>@default_rp_1.cpu_shares<<<",
      :cpu_shares_level      => ">>>@default_rp_1.cpu_shares_level<<<",
      :is_default            => ">>>@default_rp_1.is_default<<<"
    )
  end

  def assert_specific_storage
  >>>!~!@storage_1 = @ems.storages.first<<<
    @storage = Storage.find_by(:name => ">>>@storage_1.name<<<")
    expect(@storage).to have_attributes(
      :ems_ref                       => ">>>@storage_1.ems_ref<<<",
      :ems_ref_obj                   => ">>>@storage_1.ems_ref_obj<<<",
      :name                          => ">>>@storage_1.name<<<",
      :store_type                    => ">>>@storage_1.store_type<<<",
      :total_space                   => >>>@storage_1.total_space<<<,
      :free_space                    => >>>@storage_1.free_space<<<,
      :uncommitted                   => >>>@storage_1.uncommitted<<<,
      :multiplehostaccess            => >>>@storage_1.multiplehostaccess<<<, # TODO: Should this be a boolean column?
      :location                      => ">>>@storage_1.location<<<",
      :directory_hierarchy_supported => ">>>@storage_1.directory_hierarchy_supported<<<",
      :thin_provisioning_supported   => ">>>@storage_1.thin_provisioning_supported<<<",
      :raw_disk_mappings_supported   => ">>>@storage_1.raw_disk_mappings_supported<<<"
    )
  >>>!~!@storage_2 = @ems.storages.second<<<
    @storage2 = Storage.find_by(:name => ">>>@storage_2.name<<<")
    expect(@storage2).to have_attributes(
      :ems_ref                       => ">>>@storage_2.ems_ref<<<",
      :ems_ref_obj                   => ">>>@storage_2.ems_ref_obj<<<",
      :name                          => ">>>@storage_2.name<<<",
      :store_type                    => ">>>@storage_2.store_type<<<",
      :total_space                   => >>>@storage_2.total_space<<<,
      :free_space                    => >>>@storage_2.free_space<<<,
      :uncommitted                   => >>>@storage_2.uncommitted<<<,
      :multiplehostaccess            => >>>@storage_2.multiplehostaccess<<<, # TODO: Should this be a boolean column?
      :location                      => ">>>@storage_2.location<<<",
      :directory_hierarchy_supported => ">>>@storage_2.directory_hierarchy_supported<<<",
      :thin_provisioning_supported   => ">>>@storage_2.thin_provisioning_supported<<<",
      :raw_disk_mappings_supported   => ">>>@storage_2.raw_disk_mappings_supported<<<"
    )

  def assert_specific_host
  >>>!~!@host_1 = @ems.hosts.first<<<
    @host = ManageIQ::Providers::Redhat::InfraManager::Host.find_by(:name => ">>>@host_1.name<<<")
    expect(@host).to have_attributes(
      :ems_ref          => ">>>@host_1.ems_ref<<<",
      :ems_ref_obj      => ">>>@host_1.ems_ref_obj<<<",
      :name             => ">>>@host_1.name<<<",
      :hostname         => ">>>@host_1.hostname<<<",
      :ipaddress        => ">>>@host_1.ipaddress<<<",
      :uid_ems          => ">>>@host_1.uid_ems<<<",
      :vmm_vendor       => ">>>@host_1.vmm_vendor<<<",
      :vmm_version      => ">>>@host_1.vmm_version<<<",
      :vmm_product      => ">>>@host_1.vmm_product<<<",
      :vmm_buildnumber  => ">>>@host_1.vmm_buildnumber<<<" ,
      :power_state      => ">>>@host_1.power_state<<<",
      :connection_state => ">>>@host_1.connection_state<<<"
    )

    @host_cluster = EmsCluster.find_by(:ems_ref => ">>>@host_1.ems_cluster.ems_ref<<<")
    expect(@host.ems_cluster).to eq(@host_cluster)
    expect(@host.storages.size).to eq(>>>@host_1.storages.size<<<)
    expect(@host.storages).to include(@storage2) ### MIGHT BE WRONG, CHECK MANUALLY

  >>>!~!@host_os_1 = @host_1.operating_system<<<
    expect(@host.operating_system).to have_attributes(
      :name         => ">>>@host_os_1.name<<<",
      :product_name => ">>>@host_os_1.product_name<<<",
      :version      => ">>>@host_os_1.version<<<",
      :build_number => ">>>@host_os_1.build_number<<<",
      :product_type => ">>>@host_os_1.product_type<<<"
    )

    expect(@host.system_services.size).to eq(>>>@host_1.system_services.size<<<)

    expect(@host.switches.size).to eq(>>>@host_1.switches.size<<<)
  >>>!~!@host_switch_1 = @host_1.switches.first<<<
    switch = @host.switches.first
    expect(switch).to have_attributes(
      :uid_ems           => ">>>@host_switch_1.uid_ems<<<",
      :name              => ">>>@host_switch_1.name<<<",
      :ports             => ">>>@host_switch_1.ports<<<" ,
      :allow_promiscuous => ">>>@host_switch_1.allow_promiscuous<<<" ,
      :forged_transmits  => ">>>@host_switch_1.forged_transmits<<<" ,
      :mac_changes       => ">>>@host_switch_1.mac_changes<<<"
    )

    expect(switch.lans.size).to eq(>>>@host_switch_1.lans.size<<<)
>>>!~!@lan_1 = @host_switch_1.lans.first<<<
    @lan = switch.lans.first
    expect(@lan).to have_attributes(
      :uid_ems                    => ">>>@lan_1.uid_ems<<<",
      :name                       => ">>>@lan_1.name<<<",
      :tag                        => ">>>@lan_1.tag<<<",
      :allow_promiscuous          => ">>>@lan_1.allow_promiscuous<<<",
      :forged_transmits           => ">>>@lan_1.forged_transmits<<<",
      :mac_changes                => ">>>@lan_1.mac_changes<<<",
      :computed_allow_promiscuous => ">>>@lan_1.computed_allow_promiscuous<<<",
      :computed_forged_transmits  => ">>>@lan_1.computed_forged_transmits<<<",
      :computed_mac_changes       => ">>>@lan_1.computed_mac_changes<<<"
    )

>>>!~!@host_hardware_1 = @host_1.hardware<<<
    expect(@host.hardware).to have_attributes(
      :cpu_speed            => >>>@host_hardware_1.cpu_speed<<<,
      :cpu_type             => ">>>@host_hardware_1.cpu_type<<<",
      :manufacturer         => ">>>@host_hardware_1.manufacturer<<<",
      :model                => ">>>@host_hardware_1.model<<<",
      :number_of_nics       => >>>@host_hardware_1.number_of_nics<<<,
      :memory_mb            => >>>@host_hardware_1.memory_mb<<<,
      :memory_console       => ">>>@host_hardware_1.memory_console<<<",
      :cpu_sockets          => >>>@host_hardware_1.cpu_sockets<<<,
      :cpu_total_cores      => >>>@host_hardware_1.cpu_total_cores<<<,
      :cpu_cores_per_socket => >>>@host_hardware_1.cpu_cores_per_socket<<<,
      :guest_os             => ">>>@host_hardware_1.guest_os<<<",
      :guest_os_full_name   => ">>>@host_hardware_1.guest_os_full_name<<<",
      :vmotion_enabled      => ">>>@host_hardware_1.vmotion_enabled<<<",
      :cpu_usage            => ">>>@host_hardware_1.cpu_usage<<<",
      :memory_usage         => ">>>@host_hardware_1.memory_usage<<<"
    )

    expect(@host.hardware.networks.size).to eq(>>>@host_1.hardware.networks.size<<<)
    >>>!~!@host_network_1 = @host_1.hardware.networks.find_by(:description => "eth0")<<<
    network = @host.hardware.networks.find_by(:description => "eth0")
    expect(network).to have_attributes(
      :description  => "eth0",
      :dhcp_enabled => ">>>@host_network_1.dhcp_enabled<<<",
      :ipaddress    => ">>>@host_network_1.ipaddress<<<",
      :subnet_mask  => ">>>@host_network_1.subnet_mask<<<"
    )

    # TODO: Verify this host should have 3 nics, 2 cdroms, 1 floppy, any storage adapters?
    expect(@host.hardware.guest_devices.size).to eq(>>>@host_1.hardware.guest_devices.size<<<)

    expect(@host.hardware.nics.size).to eq(>>>@host_1.hardware.nics.size<<<)
    nic = @host.hardware.nics.first
    >>>!~!@host_nic_1 = @host_1.hardware.nics.first<<<
    expect(nic).to have_attributes(
      :uid_ems         => ">>>@host_nic_1.uid_ems<<<",
      :device_name     => ">>>@host_nic_1.device_name<<<",
      :device_type     => ">>>@host_nic_1.device_type<<<",
      :location        => ">>>@host_nic_1.location<<<",
      :present         => ">>>@host_nic_1.present<<<" ,
      :controller_type => ">>>@host_nic_1.controller_type<<<"
    )
    expect(nic.switch).to eq(switch)
    expect(nic.network).to eq(network)

    expect(@host.hardware.storage_adapters.size).to eq(>>>@host_1.hardware.storage_adapters.size<<<) # TODO: See @host.hardware.guest_devices TODO
  end
    >>>!~!@vm_on = Vm.all.detect{|vm| vm.raw_power_state == "up"}<<<
  def assert_specific_vm_powered_on
    v = ManageIQ::Providers::Redhat::InfraManager::Vm.find_by(:name => ">>>@vm_on.name<<<")
    expect(v).to have_attributes(
      :template              => >>>@vm_on.template<<<,
      :ems_ref               => ">>>@vm_on.ems_ref<<<",
      :ems_ref_obj           => ">>>@vm_on.ems_ref_obj<<<",
      :uid_ems               => ">>>@vm_on.uid_ems<<<",
      :vendor                => ">>>@vm_on.vendor<<<",
      :raw_power_state       => ">>>@vm_on.raw_power_state<<<",
      :power_state           => ">>>@vm_on.power_state<<<",
      :location              => ">>>@vm_on.location<<<",
      :tools_status          => ">>>@vm_on.tools_status<<<" ,
      :boot_time             => Time.zone.parse(">>>@vm_on.boot_time.strftime("%Y-%m-%dT%H:%M:%S.%L")<<<"),
      :standby_action        => ">>>@vm_on.standby_action<<<",
      :connection_state      => ">>>@vm_on.connection_state<<<",
      :cpu_affinity          => ">>>@vm_on.cpu_affinity<<<",
      :memory_reserve        => >>>@vm_on.memory_reserve<<<,
      :memory_reserve_expand => ">>>@vm_on.memory_reserve_expand<<<",
      :memory_limit          => ">>>@vm_on.memory_limit<<<",
      :memory_shares         => ">>>@vm_on.memory_shares<<<" ,
      :memory_shares_level   => ">>>@vm_on.memory_shares_level<<<",
      :cpu_reserve           => ">>>@vm_on.cpu_reserve<<<",
      :cpu_reserve_expand    => ">>>@vm_on.cpu_reserve_expand<<<",
      :cpu_limit             => ">>>@vm_on.cpu_limit<<<",
      :cpu_shares            => ">>>@vm_on.cpu_shares<<<",
      :cpu_shares_level      => ">>>@vm_on.cpu_shares_level<<<"
    )

    expect(v.ext_management_system).to eq(@ems)
    expect(v.ems_cluster).to eq(@cluster)
    expect(v.parent_resource_pool).to eq(@default_rp)
>>>!~!@host_2 = @vm_on.host<<<
    host = ManageIQ::Providers::Redhat::InfraManager::Host.find_by(:name => ">>>@host_2.name<<<")
    expect(v.host).to eq(host)
    expect(v.storages).to eq([@storage]) # CHECK MANUALLY

    expect(v.operating_system).to have_attributes(
      :product_name => ">>>@vm_on.operating_system.product_name<<<"
    )

    expect(v.hostnames).to match_array(>>>@vm_on.hostnames.to_a<<<)
    expect(v.custom_attributes.size).to eq(>>>@vm_on.custom_attributes.size<<<)

    expect(v.snapshots.size).to eq(>>>@vm_on.snapshots.size<<<)

    >>>!~!@snapshot_1 = @vm_on.snapshots.detect { |s| s.current == 1 }<<<# TODO: Fix this boolean column
    snapshot = v.snapshots.detect { |s| s.current == 1 } # TODO: Fix this boolean column
    expect(snapshot).to have_attributes(
      :uid         => ">>>@snapshot_1.uid<<<",
      :parent_uid  => ">>>@snapshot_1.parent_uid<<<",
      :uid_ems     => ">>>@snapshot_1.uid_ems<<<",
      :name        => ">>>@snapshot_1.name<<<",
      :description => ">>>@snapshot_1.description<<<",
      :current     => >>>@snapshot_1.current<<<,
      :total_size  => ">>>@snapshot_1.total_size<<<",
      :filename    => ">>>@snapshot_1.filename<<<"
    )
    snapshot_parent = ::Snapshot.find_by(:name => ">>>@snapshot_1.parent.name<<<")
    expect(snapshot.parent).to eq(snapshot_parent)

>>>!~!@vm_on_hardware = @vm_on.hardware<<<
    expect(v.hardware).to have_attributes(
      :guest_os             => ">>>@vm_on_hardware.guest_os<<<",
      :guest_os_full_name   => ">>>@vm_on_hardware.guest_os_full_name<<<",
      :bios                 => ">>>@vm_on_hardware.bios<<<",
      :cpu_cores_per_socket => >>>@vm_on_hardware.cpu_cores_per_socket<<<,
      :cpu_total_cores      => >>>@vm_on_hardware.cpu_total_cores<<<,
      :cpu_sockets          => >>>@vm_on_hardware.cpu_sockets<<<,
      :annotation           => ">>>@vm_on_hardware.annotation<<<",
      :memory_mb            => >>>@vm_on_hardware.memory_mb<<<
    )

    expect(v.hardware.disks.size).to eq(>>>@vm_on.hardware.disks.size<<<)
    >>>!~!@vm_on_disk_1 = @vm_on.hardware.disks.first<<<
    disk = v.hardware.disks.find_by(:device_name => ">>>@vm_on_disk_1.device_name<<<")
    expect(disk).to have_attributes(
      :device_name     => ">>>@vm_on_disk_1.device_name<<<",
      :device_type     => ">>>@vm_on_disk_1.device_type<<<",
      :controller_type => ">>>@vm_on_disk_1.controller_type<<<",
      :present         => ">>>@vm_on_disk_1.present<<<",
      :filename        => ">>>@vm_on_disk_1.filename<<<",
      :location        => ">>>@vm_on_disk_1.location<<<",
      :size            => >>>@vm_on_disk_1.size<<<,
      :size_on_disk    => >>>@vm_on_disk_1.size_on_disk<<<,
      :mode            => ">>>@vm_on_disk_1.mode<<<",
      :disk_type       => ">>>@vm_on_disk_1.disk_type<<<",
      :start_connected => ">>>@vm_on_disk_1.start_connected<<<"
    )
    expect(disk.storage).to eq(@storage) ## CHECK MANUALLY

    expect(v.hardware.guest_devices.size).to eq(>>>@vm_on.hardware.guest_devices.size<<<)
    expect(v.hardware.nics.size).to eq(>>>@vm_on.hardware.nics.size<<<)
    >>>!~!@vm_on_nic_1 = @vm_on.hardware.nics.first<<<
    nic = v.hardware.nics.find_by(:device_name => ">>>@vm_on_nic_1.device_name<<<")
    expect(nic).to have_attributes(
      :uid_ems         => ">>>@vm_on_nic_1.uid_ems<<<",
      :device_name     => ">>>@vm_on_nic_1.device_name<<<",
      :device_type     => ">>>@vm_on_nic_1.device_type<<<",
      :controller_type => ">>>@vm_on_nic_1.controller_type<<<",
      :present         => ">>>@vm_on_nic_1.present<<<" ,
      :start_connected => ">>>@vm_on_nic_1.start_connected<<<" ,
      :address         => ">>>@vm_on_nic_1.address<<<"
    )
    # nic.lan.should == @lan # TODO: Hook up this connection

    expect(v.parent_datacenter).to have_attributes(
      :ems_ref     => ">>>@vm_on.parent_datacenter.ems_ref<<<",
      :ems_ref_obj => ">>>@vm_on.parent_datacenter.ems_ref_obj<<<",
      :uid_ems     => ">>>@vm_on.parent_datacenter.uid_ems<<<",
      :name        => ">>>@vm_on.parent_datacenter.name<<<",
      :type        => ">>>@vm_on.parent_datacenter.type<<<",
      :folder_path => ">>>@vm_on.parent_datacenter.folder_path<<<"
    )

    expect(v.parent_folder).to have_attributes(
      :ems_ref     => ">>>@vm_on.parent_folder.ems_ref<<<" ,
      :ems_ref_obj => ">>>@vm_on.parent_folder.ems_ref_obj<<<" ,
      :uid_ems     => ">>>@vm_on.parent_folder.uid_ems<<<",
      :name        => ">>>@vm_on.parent_folder.name<<<",
      :type        => ">>>@vm_on.parent_folder.type<<<" ,
      :folder_path => ">>>@vm_on.parent_folder.folder_path<<<"
    )

    expect(v.parent_blue_folder).to have_attributes(
      :ems_ref     => ">>>@vm_on.parent_blue_folder.ems_ref<<<",
      :ems_ref_obj => ">>>@vm_on.parent_blue_folder.ems_ref_obj<<<",
      :uid_ems     => ">>>@vm_on.parent_blue_folder.uid_ems<<<",
      :name        => ">>>@vm_on.parent_blue_folder.name<<<",
      :type        => ">>>@vm_on.parent_blue_folder.type<<<",
      :folder_path => ">>>@vm_on.parent_blue_folder.folder_path<<<"
    )
  end

    >>>!~!@vm_off = Vm.all.detect{|vm| vm.raw_power_state == "down"}<<<
  def assert_specific_vm_powered_off
    v = ManageIQ::Providers::Redhat::InfraManager::Vm.find_by(:name => ">>>@vm_off.name<<<")
    expect(v).to have_attributes(
      :template              => >>>@vm_off.template<<<,
      :ems_ref               => ">>>@vm_off.ems_ref<<<",
      :ems_ref_obj           => ">>>@vm_off.ems_ref_obj<<<",
      :uid_ems               => ">>>@vm_off.uid_ems<<<",
      :vendor                => ">>>@vm_off.vendor<<<",
      :raw_power_state       => ">>>@vm_off.raw_power_state<<<",
      :power_state           => ">>>@vm_off.power_state<<<",
      :location              => ">>>@vm_off.location<<<",
      :tools_status          => ">>>@vm_off.tools_status<<<" ,
      :boot_time             => nil,
      :standby_action        => ">>>@vm_off.standby_action<<<",
      :connection_state      => ">>>@vm_off.connection_state<<<",
      :cpu_affinity          => ">>>@vm_off.cpu_affinity<<<",
      :memory_reserve        => >>>@vm_off.memory_reserve<<<,
      :memory_reserve_expand => ">>>@vm_off.memory_reserve_expand<<<",
      :memory_limit          => ">>>@vm_off.memory_limit<<<",
      :memory_shares         => ">>>@vm_off.memory_shares<<<" ,
      :memory_shares_level   => ">>>@vm_off.memory_shares_level<<<",
      :cpu_reserve           => ">>>@vm_off.cpu_reserve<<<",
      :cpu_reserve_expand    => ">>>@vm_off.cpu_reserve_expand<<<",
      :cpu_limit             => ">>>@vm_off.cpu_limit<<<",
      :cpu_shares            => ">>>@vm_off.cpu_shares<<<",
      :cpu_shares_level      => ">>>@vm_off.cpu_shares_level<<<"
    )

    expect(v.ext_management_system).to eq(@ems)
    expect(v.ems_cluster).to eq(@cluster)
    expect(v.parent_resource_pool).to eq(@default_rp)
    expect(v.storages).to eq([@storage]) # CHECK MANUALLY

    expect(v.operating_system).to have_attributes(
      :product_name => ">>>@vm_off.operating_system.product_name<<<"
    )

    expect(v.hostnames).to match_array(>>>@vm_off.hostnames.to_a<<<)
    expect(v.custom_attributes.size).to eq(>>>@vm_off.custom_attributes.size<<<)

    expect(v.snapshots.size).to eq(>>>@vm_off.snapshots.size<<<)
    >>>!~!@snapshot_1 = @vm_off.snapshots.detect { |s| s.current == 1 }<<<# TODO: Fix this boolean column
    snapshot = v.snapshots.detect { |s| s.current == 1 } # TODO: Fix this boolean column
    expect(snapshot).to have_attributes(
      :uid         => ">>>@snapshot_1.uid<<<",
      :parent_uid  => ">>>@snapshot_1.parent_uid<<<",
      :uid_ems     => ">>>@snapshot_1.uid_ems<<<",
      :name        => ">>>@snapshot_1.name<<<",
      :description => ">>>@snapshot_1.description<<<",
      :current     => >>>@snapshot_1.current<<<,
      :total_size  => >>>@snapshot_1.total_size<<<,
      :filename    => ">>>@snapshot_1.filename<<<"
    )
    expect(snapshot.parent).to be_nil

>>>!~!@vm_off_hardware = @vm_off.hardware<<<
    expect(v.hardware).to have_attributes(
      :guest_os             => ">>>@vm_off_hardware.guest_os<<<",
      :guest_os_full_name   => ">>>@vm_off_hardware.guest_os_full_name<<<" ,
      :bios                 => ">>>@vm_off_hardware.bios<<<",
      :cpu_cores_per_socket => >>>@vm_off_hardware.cpu_cores_per_socket<<<,
      :cpu_total_cores      => >>>@vm_off_hardware.cpu_total_cores<<<,
      :cpu_sockets          => >>>@vm_off_hardware.cpu_sockets<<<,
      :annotation           => ">>>@vm_off_hardware.annotation<<<",
      :memory_mb            => >>>@vm_off_hardware.memory_mb<<<
    )

    expect(v.hardware.disks.size).to eq(>>>@vm_off.hardware.disks.size<<<)
>>>!~!@vm_off_disk_1 = @vm_off.hardware.disks.first<<<
    disk = v.hardware.disks.find_by(:device_name => ">>>@vm_off_disk_1.device_name<<<")
    expect(disk).to have_attributes(
      :device_name     => ">>>@vm_off_disk_1.device_name<<<",
      :device_type     => ">>>@vm_off_disk_1.device_type<<<",
      :controller_type => ">>>@vm_off_disk_1.controller_type<<<",
      :present         => ">>>@vm_off_disk_1.present<<<",
      :filename        => ">>>@vm_off_disk_1.filename<<<",
      :location        => ">>>@vm_off_disk_1.location<<<",
      :size            => >>>@vm_off_disk_1.size<<<,
      :size_on_disk    => >>>@vm_off_disk_1.size_on_disk<<<,
      :mode            => ">>>@vm_off_disk_1.mode<<<",
      :disk_type       => ">>>@vm_off_disk_1.disk_type<<<",
      :start_connected => ">>>@vm_off_disk_1.start_connected<<<"
    )
    expect(disk.storage).to eq(@storage) ## CHECK MANUALLY

    expect(v.hardware.guest_devices.size).to eq(>>>@vm_off.hardware.guest_devices.size<<<)
    expect(v.hardware.nics.size).to eq(>>>@vm_off.hardware.nics.size<<<)
    >>>!~!@vm_off_nic_1 = @vm_off.hardware.nics.first<<<
    nic = v.hardware.nics.find_by(:device_name => ">>>@vm_off_nic_1.device_name<<<")
    expect(nic).to have_attributes(
      :uid_ems         => ">>>@vm_off_nic_1.uid_ems<<<",
      :device_name     => ">>>@vm_off_nic_1.device_name<<<",
      :device_type     => ">>>@vm_off_nic_1.device_type<<<",
      :controller_type => ">>>@vm_off_nic_1.controller_type<<<",
      :present         => ">>>@vm_off_nic_1.present<<<" ,
      :start_connected => ">>>@vm_off_nic_1.start_connected<<<" ,
      :address         => ">>>@vm_off_nic_1.address<<<"
    )
    # nic.lan.should == @lan # TODO: Hook up this connection

    expect(v.parent_datacenter).to have_attributes(
      :ems_ref     => ">>>@vm_off.parent_datacenter.ems_ref<<<",
      :ems_ref_obj => ">>>@vm_off.parent_datacenter.ems_ref_obj<<<",
      :uid_ems     => ">>>@vm_off.parent_datacenter.uid_ems<<<",
      :name        => ">>>@vm_off.parent_datacenter.name<<<",
      :type        => ">>>@vm_off.parent_datacenter.type<<<",
      :folder_path => ">>>@vm_off.parent_datacenter.folder_path<<<"
    )

    expect(v.parent_folder).to have_attributes(
      :ems_ref     => ">>>@vm_off.parent_folder.ems_ref<<<" ,
      :ems_ref_obj => ">>>@vm_off.parent_folder.ems_ref_obj<<<" ,
      :uid_ems     => ">>>@vm_off.parent_folder.uid_ems<<<",
      :name        => ">>>@vm_off.parent_folder.name<<<",
      :type        => ">>>@vm_off.parent_folder.type<<<" ,
      :folder_path => ">>>@vm_off.parent_folder.folder_path<<<"
    )

    expect(v.parent_blue_folder).to have_attributes(
      :ems_ref     => ">>>@vm_off.parent_blue_folder.ems_ref<<<",
      :ems_ref_obj => ">>>@vm_off.parent_blue_folder.ems_ref_obj<<<",
      :uid_ems     => ">>>@vm_off.parent_blue_folder.uid_ems<<<",
      :name        => ">>>@vm_off.parent_blue_folder.name<<<",
      :type        => ">>>@vm_off.parent_blue_folder.type<<<",
      :folder_path => ">>>@vm_off.parent_blue_folder.folder_path<<<"
    )
  end

  >>>!~!@template_1 = ManageIQ::Providers::Redhat::InfraManager::Template.first<<<
  def assert_specific_template
    v = ManageIQ::Providers::Redhat::InfraManager::Template.find_by(:name => ">>>@template_1.name<<<")
    expect(v).to have_attributes(
      :template              => ">>>@template_1.template<<<" ,
      :ems_ref               => ">>>@template_1.ems_ref<<<",
      :ems_ref_obj           => ">>>@template_1.ems_ref_obj<<<",
      :uid_ems               => ">>>@template_1.uid_ems<<<",
      :vendor                => ">>>@template_1.vendor<<<",
      :power_state           => ">>>@template_1.power_state<<<",
      :location              => ">>>@template_1.location<<<",
      :tools_status          => ">>>@template_1.tools_status<<<" ,
      :boot_time             => nil,
      :standby_action        => ">>>@template_1.standby_action<<<",
      :connection_state      => ">>>@template_1.connection_state<<<",
      :cpu_affinity          => ">>>@template_1.cpu_affinity<<<",
      :memory_reserve        => >>>@template_1.memory_reserve<<<,
      :memory_reserve_expand => ">>>@template_1.memory_reserve_expand<<<",
      :memory_limit          => ">>>@template_1.memory_limit<<<",
      :memory_shares         => ">>>@template_1.memory_shares<<<" ,
      :memory_shares_level   => ">>>@template_1.memory_shares_level<<<",
      :cpu_reserve           => ">>>@template_1.cpu_reserve<<<",
      :cpu_reserve_expand    => ">>>@template_1.cpu_reserve_expand<<<",
      :cpu_limit             => ">>>@template_1.cpu_limit<<<",
      :cpu_shares            => ">>>@template_1.cpu_shares<<<",
      :cpu_shares_level      => ">>>@template_1.cpu_shares_level<<<"
    )

    expect(v.ext_management_system).to eq(@ems)
    expect(v.ems_cluster).to eq(@cluster)
    expect(v.parent_resource_pool).to  be_nil
    expect(v.host).to                  be_nil
    expect(v.storages).to eq([@storage]) # CHECK MANUALLY
    # v.storage  # TODO: Fix bug where duplication location GUIDs could cause the wrong value to appear.

    expect(v.operating_system).to have_attributes(
      :product_name => ">>>@template_1.product_name<<<"
    )

    expect(v.custom_attributes.size).to eq(>>>@template_1.custom_attributes.size<<<)
    expect(v.snapshots.size).to eq(>>>@template_1.snapshots.size<<<)

>>>!~!@template_1_hardware = @template_1.hardware<<<
    expect(v.hardware).to have_attributes(
      :guest_os             => ">>>@template_1_hardware.guest_os<<<",
      :guest_os_full_name   => ">>>@template_1_hardware.guest_os_full_name<<<",
      :bios                 => ">>>@template_1_hardware.bios<<<",
      :cpu_cores_per_socket => >>>@template_1_hardware.cpu_cores_per_socket<<<,
      :cpu_total_cores      => >>>@template_1_hardware.cpu_total_cores<<<,
      :cpu_sockets          => >>>@template_1_hardware.cpu_sockets<<<,
      :annotation           => ">>>@template_1_hardware.annotation<<<",
      :memory_mb            => >>>@template_1_hardware.memory_mb<<<
    )

    expect(v.hardware.disks.size).to eq(>>>@template_1.hardware.disks.size<<<)
    >>>!~!@template_1_disk_1 = @template_1.hardware.disks.first<<<
    disk = v.hardware.disks.find_by(:device_name => ">>>@template_1_disk_1.device_name<<<")
    expect(disk).to have_attributes(
      :device_name     => ">>>@template_1_disk_1.device_name<<<",
      :device_type     => ">>>@template_1_disk_1.device_type<<<",
      :controller_type => ">>>@template_1_disk_1.controller_type<<<",
      :present         => ">>>@template_1_disk_1.present<<<",
      :filename        => ">>>@template_1_disk_1.filename<<<",
      :location        => ">>>@template_1_disk_1.location<<<",
      :size            => >>>@template_1_disk_1.size<<<,
      :size_on_disk    => >>>@template_1_disk_1.size_on_disk<<<,
      :mode            => ">>>@template_1_disk_1.mode<<<",
      :disk_type       => ">>>@template_1_disk_1.disk_type<<<",
      :start_connected => ">>>@template_1_disk_1.start_connected<<<"
    )
    expect(disk.storage).to eq(@storage) ## CHECK MANUALLY

    expect(v.hardware.guest_devices.size).to eq(>>>@template_1.hardware.guest_devices.size<<<)
    expect(v.hardware.nics.size).to eq(>>>@template_1.hardware.nics.size<<<)
    expect(v.hardware.networks.size).to eq(>>>@template_1.hardware.networks.size<<<)

    expect(v.parent_datacenter).to have_attributes(
      :ems_ref     => ">>>@template_1.parent_datacenter.ems_ref<<<",
      :ems_ref_obj => ">>>@template_1.parent_datacenter.ems_ref_obj<<<",
      :uid_ems     => ">>>@template_1.parent_datacenter.uid_ems<<<",
      :name        => ">>>@template_1.parent_datacenter.name<<<",
      :type        => ">>>@template_1.parent_datacenter.type<<<",
      :folder_path => ">>>@template_1.parent_datacenter.folder_path<<<"
    )

    expect(v.parent_folder).to have_attributes(
      :ems_ref     => ">>>@template_1.parent_folder.ems_ref<<<" ,
      :ems_ref_obj => ">>>@template_1.parent_folder.ems_ref_obj<<<" ,
      :uid_ems     => ">>>@template_1.parent_folder.uid_ems<<<",
      :name        => ">>>@template_1.parent_folder.name<<<",
      :type        => ">>>@template_1.parent_folder.type<<<" ,
      :folder_path => ">>>@template_1.parent_folder.folder_path<<<"
    )

    expect(v.parent_blue_folder).to have_attributes(
      :ems_ref     => ">>>@template_1.parent_blue_folder.ems_ref<<<",
      :ems_ref_obj => ">>>@template_1.parent_blue_folder.ems_ref_obj<<<",
      :uid_ems     => ">>>@template_1.parent_blue_folder.uid_ems<<<",
      :name        => ">>>@template_1.parent_blue_folder.name<<<",
      :type        => ">>>@template_1.parent_blue_folder.type<<<",
      :folder_path => ">>>@template_1.parent_blue_folder.folder_path<<<"
    )
  end

  def assert_relationship_tree
    expect(@ems.descendants_arranged).to match_relationship_tree(
    >>>!~t~!<<<
    )
  end
end
end
